---
- hosts: localhost
  become: yes
  gather_facts: no


  tasks:

#First tasks are looking at configuring Private Automation Hub within the controller.

   - name: Configuring to use Private Automation Hub > setup controller to ignore Galaxy certs
     ansible.controller.settings:
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       validate_certs: no
       name: GALAXY_IGNORE_CERTS
       value: "False"

   - name: Configuring to use Private Automation Hub > create Automation Hub Published Repo Credentials
     ansible.controller.credential:
       name: Automation Hub Published Repository
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       validate_certs: no
       state: present
       credential_type: "Ansible Galaxy/Automation Hub API Token"
       inputs:
         url: 'https://pah22.local/api/galaxy/content/published/'
         token: "{{ mypahtkn }}"

   - name: Configuring to use Private Automation Hub > Create Automation Hub Certified Repo Credentials
     ansible.controller.credential:
       name: Automation Hub RH Certified Repository
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       validate_certs: no
       state: present
       credential_type: Ansible Galaxy/Automation Hub API Token
       inputs:
         url: https://pah22.local/api/galaxy/content/rh-certified/
         token: "{{ mypahtkn }}"

   - name: Configuring to use Private Automation Hub > create Automation Hub Community Repo Credentials
     ansible.controller.credential:
       name: Automation Hub Community Repository
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       validate_certs: no
       state: present
       credential_type: Ansible Galaxy/Automation Hub API Token
       inputs:
         url: https://pah22.local/api/galaxy/content/community/
         token: "{{ mypahtkn }}"

   - name: Configuring to use Private Automation Hub > create Automation Hub Container Registry credentials
     ansible.controller.credential:
       name: Automation Hub Container Registry
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       validate_certs: no
       state: present
       credential_type: Container Registry
       inputs:
         host: pah22.local
         username: "{{ mypahusr }}"
         password: "{{ mypahpss }}"
         verify_ssl: false

   - name: Configuring to use Private Automation Hub > add 2.9 compatibility execution environment
     ansible.controller.execution_environment:
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       validate_certs: no
       name: "Automation Hub Ansible Engine 2.9 execution environment"
       image: pah22.local/ee-29-rhel8:latest
       credential: Automation Hub Container Registry

   - name: Configuring to use Private Automation Hub > add default rhel8 execution environment
     ansible.controller.execution_environment:
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       validate_certs: no
       name: "Automation Hub Default execution environment"
       image: pah22.local/ee-supported-rhel8:latest
       credential: Automation Hub Container Registry

   - name: Configuring to use Private Automation Hub > add minimal execution environment
     ansible.controller.execution_environment:
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       validate_certs: no
       name: "Automation Hub Minimal execution environment"
       image: pah22.local/ee-minimal-rhel8:latest
       credential: Automation Hub Container Registry

#The following tasks are aiming at configuring our MySQL database automation demo

   - name: Create Demo Organization
     ansible.controller.organization:
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       validate_certs: no
       name: "Demo Organization"
       instance_groups: "remote_exec"
       state: present
       galaxy_credentials:
         - Automation Hub Published Repository
         - Automation Hub RH Certified Repository
         - Automation Hub Community Repository
         - Ansible Galaxy

   - name: Create Github credentials
     ansible.controller.credential:
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       name: Github credential
       validate_certs: no
       organization: "Demo Organization"
       state: present
       credential_type: Source Control
       inputs:
         username: "{{ myghusr }}"
         password: "{{ myghtke }}"

   - name: Create ghcr.io credentials
     ansible.controller.credential:
       name: ghcr.io credential
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       validate_certs: no
       organization: "Demo Organization"
       state: present
       credential_type: Container Registry
       inputs:
         host: ghcr.io
         username: "{{ myghusr }}"
         password: "{{ myghtke }}"

   - name: Create Machine Credentials for MySQL host
     ansible.controller.credential:
       name: MySQL host credentials
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       validate_certs: no
       organization: "Demo Organization"
       state: present
       credential_type: Machine
       inputs:
         username: root
         password: "{{  myrootpss }}"

   - name: Add MySQL demo inventory
     ansible.controller.inventory:
       name: "MySQL inventory file from Github"
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       description: "This is a simple inventory from a github repository"
       instance_groups: "remote_exec"
       validate_certs: no
       organization: "Demo Organization"
       state: present

   - name: Add MySQL demo project
     ansible.controller.project:
       name: "MySQL demo project"
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       validate_certs: no
       description: "This project is for managing mysql databases."
       organization: "Demo Organization"
       scm_type: git
       scm_url: https://github.com/pablo-preciado/mysql-test.git
       credential: Github credential
       scm_update_on_launch: True
       scm_clean: yes
       scm_delete_on_update: yes
       scm_update_cache_timeout: 0
       default_environment: "Default execution environment"
       state: present

   - name: Add an inventory source
     ansible.controller.inventory_source:
       name: "Github inventory source"
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       validate_certs: no
       description: Source for inventory
       inventory: "Inventory file from Github"
       organization: "Demo Organization"
       source: scm
       source_path: inventory/hosts
       source_project: "MySQL demo project"
       overwrite: True
       overwrite_vars: yes
       update_on_launch: True

   - name: Launch a MySQL demo project
     ansible.controller.project_update:
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       validate_certs: no
       organization: "Demo Organization"
       project: "MySQL demo project"

   - name: Add MySQL EE to the controller instance > this one is on github
     ansible.controller.execution_environment:
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       validate_certs: no
       name: "MySQL EE"
       image: ghcr.io/pablo-preciado/mysql-test/mysql-ee:20
       credential: ghcr.io credential

   - name: Create "Install MySQL" job template
     ansible.controller.job_template:
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       validate_certs: no
       name: "Install MySQL"
       job_type: "run"
       organization: "Demo Organization"
       inventory: "Inventory file from Github"
       project: "MySQL demo project"
       playbook: "install-n-start-mysql.yml"
       instance_groups: "remote_exec"
       verbosity: 3
       credentials: "MySQL host credentials"
       state: "present"

   - name: Create "Create DB" job template
     ansible.controller.job_template:
       controller_host: "{{ mydemocontr }}"
       controller_username: "{{ myusrcontr }}"
       controller_password: "{{ mypsscontr }}"
       validate_certs: no
       name: "Create DB bobdata"
       job_type: "run"
       organization: "Demo Organization"
       inventory: "Inventory file from Github"
       project: "MySQL demo project"
       playbook: "db-creation-test.yml"
       execution_environment: "MySQL EE"
       instance_groups: "remote_exec"
       verbosity: 3
       credentials: "MySQL host credentials"
       state: "present"
